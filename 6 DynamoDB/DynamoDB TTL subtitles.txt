Hello Cloud Gurus
and welcome to this lecture.
And this lecture is going to introduce DynamoDB TTL,
is also known as DynamoDB Time To Live.
And this is a topic that has been coming up
in the exams recently based on student feedback.
So this lecture is going to just cover off TTL,
so you know exactly what it is for the exam.
So let's get started.
So what is DynamoDB TTL?
Well, TTL or Time To Live,
it's an attribute which defines
an expiry time for your data.
So you define an expiry time and expired items
are automatically marked for deletion.
And once an item has been marked for deletion,
that means it's going to be deleted
within the next 48 hours.
And this is really good for removing
any irrelevant or old data, so data that's no longer useful
to your application.
So think session data, event logs, any temporary data,
so any data that's no longer useful to your application
after a certain period of time.
And this is gonna really help to reduce costs
for storing data in DynamoDB,
because it automatically removes data
which you no longer need.
So the data is no longer relevant,
so it just does that housekeeping for you
and automatically deletes the data.
So let's take a look at how that actually works
within DynamoDB, and I've got an example
session data table here.
So we're just storing the user ID, session ID,
session creation time, and the Time To Live,
and then finally, the session data itself.
And the first thing you're probably going to notice
is that Time To Live
is expressed in a pretty strange format.
It's expressed in the Epoch time format.
And if you haven't heard of that before,
it's also known as UNIX time,
and it's also known as POSIX time as well.
And a Epoch time or UNIX time or POSIX time
that is a numerical value,
and it represents the the number of seconds
which have elapsed since 12:00 a.m.
on January the 1st, 1970.
So even before I was born,
in fact, a long time before I was born,
and probably a long time
before a lot of you were born as well.
So that is just the way that UNIX systems see time,
and that's how they express time as a numerical value.
Now in this example, I'm setting the expiration time
on our item, and I'm setting it for two hours
after the session originally began.
And don't worry, you can just use
one of these really useful translation websites.
And I've got one to show you.
I'm just gonna head over there now.
So this is the website I normally use,
it's just called a EpochConverter,
but I'm sure you can find one just by googling
or use your favorite one.
And you can just go in and set the day,
set the hour to what you want to,
and then just translate it into an Epoch timestamp.
So that's the kind of thing you can use,
if you are defining your TTL.
And it's this Epoch time number,
which actually allows DynamoDB to easily compare
your Time To Live to the current time right now.
And in this example, the expiration of this item
is set for two hours after the session originally began.
And so when the current time is greater than the TTL,
the item is going to be expired,
and it gets marked for deletion,
and then within the next 48 hours,
it's actually going to be deleted.
So that's actually quite a long window
between being marked for deletion
and actually getting deleted.
So in order to cater for that, you can actually filter out
any expired items from your queries and scans.
But let's take a look at how this actually works
within the DynamoDB console.
But first of all, we're going to need to create
our own DynamoDB table.
And I prepared a couple of commands that we're going to run
and before we do that,
you just need to make sure of course
that your AWS CLI is configured with credentials
of a user who has the correct permissions to go ahead
and create a DynamoDB tables.
So the first thing I'm gonna do is,
I'm gonna type, aws I am get hyphen user.
And this is just gonna to tell us which user we have used
when we configured the AWS CLI.
So when ran AWS Configure,
this is the user credentials that are used originally.
So I'm just gonna come back to my console
and just double-check the credentials
of that particular user.
So I'm gonna go to services, and then IAM,
I'm gonna find my user, so it was Faye.
And I'm just gonna check that that user
has the correct permissions.
So my user actually got administrator access.
But if you don't have any DynamoDB access,
if you didn't have administrator access on that account,
then you can just go ahead and Add permissions,
go to Attach existing policies,
and then just search for DynamoDB.
And you can add DynamoDB full access to that user.
And that will make sure
that you have access to use DynamoDB.
So, once you're happy with that,
I'm gonna come back to the console.
And I've actually prepared a couple of commands
that we're going to run.
So, we're gonna run one command
to firstly create a new table.
And then we're gonna run another command
to populate the table.
So I'll show you those commands before we run them.
And these are gonna be included in a text file
in the resources of the course.
So you'll be able to just copy and paste these.
So the first command is this one.
And this actually creates our session data table.
So first of all, it runs the create-table command.
It provides a table name of session data
and then it defines our primary key
which it calls it the hash key.
And that's just an alternative name that they use
for the primary key or the partition key.
So we're going to define our hash key as being the UserID
and the attribute type is gonna be of type number.
And then finally, the last thing we'd stipulate
in this command is the provision
throughput ReadCapacity units of five,
and WriteCapacity units of five.
So you just copy that command.
And don't worry, you don't need to understand
all of the different options,
you don't need to understand the DynamoDB commands,
the CLI commands for the exam,
they're not going to test you on that.
It's just the quickest way to create the table
for the purposes of this lecture.
So then just come back to the console.
And I'm just gonna paste that into my console,
hit Enter, and hopefully, if that's been successful,
you should see this kind of output summarizing
what we've done in DynamoDB.
And then the next command we're going to run
is going to perform a batch-write-item.
And this is going to write a number of items
into our new table.
And it takes as input this request items file,
which is going to be a file called items.json,
and you're going to need to download this from the resources
section of the course.
So if I show you items.json, it's simply a json file,
which is going to create these items
in our session data table.
So the first thing it does is it stipulates
the name of the table, which is session data.
And then it defines a number of PutRequests and the items
that we're actually going to put into that table.
So we've got our UserID, it's going to be a number,
this number here is the actual UserID,
then we've got the session creation time, expiration time,
and a SessionID as well.
So it just creates three different items
which is going to put into the table.
So if we come back to our command,
I'm just gonna copy and paste that.
Okay, and if that's successful,
we can come back to our console or we can just check
whether that table got created successfully.
So I'll come to Services,
DynamoDB, and make sure that you are in the correct region
where you have run AWS configure, so on my system
I'm in us-east-1.
So I just need to make sure
that I am looking at the U.S. East 1 region, which I am.
And then if we go to Tables,
and there is our session data table.
So if you click on the Table, click on Items,
and that should be the items that we have just populated.
So if that has run successfully for you,
you should have three items in your table, with a UserID,
CreationTime, ExpiryTime and a SessionID.
And I've just set this expiry time to midnight tonight,
and today is the 6th of December,
so I have set the expiration time for these items
to be the 6th of December at midnight.
So you might want to update this set it to midnight tonight
for whatever day it is when you are watching this lecture.
So if you want to do that, once again,
just go back to the EpochConverter,
and you can create an Epoch timestamp
using whatever date you want to.
So let's say February the 2nd, 2019.
You can just configure the date that you want,
and then grab the Epoch timestamp.
And you can set it to whatever hour, minute and second
you want as well, and set whatever the local time
is for wherever you are located.
So feel free to go in and update that expiration time
if you want to follow along on this lecture.
So once you're happy with all of that,
we can actually go ahead and start playing around
with the Time To Live for these items.
So if you head to Actions, click on Manage TTL.
And the first thing it's going to ask you to do is,
define which attribute you are basing the Time To Live on.
And we are going to be using this expiration time
as our TTL attribute.
So you need to just type in the name of your attribute.
And DynamoDB actually allows you to preview TTL
before you actually go ahead and apply it.
So first of all, we can run a preview
based on previewing items expiring by 3:30 on today's date,
so I'm just gonna hit Run preview.
And that's what we should expect to see.
We shouldn't expect to see any items expiring by 3:30 today,
because all of these items
are set to expire at midnight tonight.
So let's just change that to December the 7th, and midnight.
And we can run the preview again.
And there we are, it should catch all three of those items,
because they are due to expire at midnight.
So if you want to go ahead and configure
Time To Live for all of these items, you can hit Continue,
and then if we go back to Overview,
you should see under the Table details,
the Time To Live attribute.
It's configured as the attribute that we defined earlier,
so the expiration time.
So that is DynamoDB TTL.
The main things to remember
is that you can use it to define exploration times
for your data.
It will mock your data for exploration,
as soon as the current time is greater than the TTL.
The item will then be expired, marked for deletion,
and then deleted within 48 hours.
And just remember, you can filter out the expired items
from your queries and scans so that you don't see them,
when you query and scan your data.
So that is everything you need to know about TTL.
If you have any questions, please let me know.
If not, feel free to move on to the next lecture, thank you.