Okay, hello Cloud Gurus and welcome
to the summary of section eight.
So we are going to summarize what we have learnt
about the other AWS Services.
So you have done really well,
you're almost at the end of the course.
So let's start with SQS.
So SQS is a distributed messaging system.
It allows you to decouple the components of your application
so that they independent.
It's pull-based, it's not push based.
There's two types of queues, you've got your Standard Queues
which is basically going to give you best effort ordering,
and your message will be delivered at least once.
Then you have your FIFO Queues, which is basically
the exact opposite, ordering is strictly preserved
and messages are delivered once with no duplicate.
And this could be good for banking transactions,
which need to happen in a strict order.
Other SQS things to remember is Visibility Timeout,
by default this is 30 seconds.
You need to increase this if your task is taking
longer than 30 seconds to complete.
The maximum visibility timeout for SQS is 12 hours.
Also we have two types of Polling.
We have Short Polling, which is returned immediately,
even if there are no messages in the queue,
but that can be a little bit expensive,
especially if you are not using your queue
as much as you should be.
And then we have Long Polling,
and this polls the queue periodically,
and only returns a response
when a message is actually in the queue,
or the timeout period is reached.
SNS is a scalable and highly available notification service
which allows you to send push notifications,
so SNS is pushed-based.
A variety of message formats are supported,
so you've got SMS text messages, we've got emails,
we've got SQS queues or any HTTP endpoint.
It's a pub-sub model where users subscribes to topics.
It's a push mechanism rather than a pull mechanism.
And as an example architecture, let's say you have got
a company that wants to send notification
to multiple customers, they could use an SNS queue
to fan out multiple messages in SQS format,
and then using a dedicated SQS queue per customer.
So if you did it that way, you'd always be able to
guarantee that each message would be delivered
to each customer at least once.
So SNS vs SES, remember that SES is for email only,
it can be used for incoming and outgoing emails as well.
And it is not subscription based,
you only need to know the email address.
Whereas SNS caters for various formats,
so it caters for SMS, SQS, HTTP endpoints, email et cetera.
It is push notification only.
It does come with a pub/sub model, so consumers
must subscribe to a topic in order to receive emails
from SNS, and you can fan out messages
to large numbers of recipients,
so multiple clients each with their own SQS queue.
Moving on to Kineses, you need to know
the difference between the three core services.
So we have Kineses Streams, these are video streams
so you can securely stream video from connected devices
to AWS for analytics and machine learning.
We then have Data Streams, this is where you can build
custom applications and process data in real-time.
So those are the two different
types of streams for Kineses streams.
We then have Kineses Firehose, this allows you to capture
transform and load data streams into AWS data stores
for near real-time analytics
with Business Intelligence tools.
And then also remember that you can configure Lambda
to subscribe to a Kineses Stream and execute a function
on your behalf when a new record is detected,
before sending the processed data
on to its final destination.
Moving on to Elastic Beanstalk,
we did do quite a few Labs with Elastic Beanstalk
so it allows you to deploy and scale your web application
including the web server platform where required.
It supports widely used programming languages,
like Java, PHP, Python, Ruby, Go, Docker, .Net and Node.js,
as well as application server platforms,
like Tomcat, Passenger, Puma, Apache, IIS et cetera.
And it provisions the underlying resources for you.
You can fully manage the EC2 instances yourself
or Elastic Beanstalk can take control of it for you,
and you can apply updates, monitoring and metrics,
and health checks as part
of your Elastic Beanstalk environment.
Remember that when you're updating Elastic Beanstalk
there're four different types of deployment approaches.
This is super critical going into your exam
to remember the four different types.
You will get different scenarios
and they will ask you what type of
Elastic Beanstalk deployment would best suit your situation.
So you have All at Once,
this is where you have a service interruption
while you go in and update the entire environment at once,
and then to roll it back, you have to perform
a further All at Once Upgrade as well.
So do remember that this is probably only good
for Test and Dev, or where the business that you're
working for can have downtime when you do an update.
You then have Rolling, Rolling on it's own will have
reduced capacity, so lets say you have ten EC2 instances
in a fleet, Rolling might update two of those at a time,
so you would only have eight online,
so you are going to have reduced capacity
but you're not going to have any downtime.
Rolling with Additional Batch allows you
to maintain full capacity, so you will add additional
EC2 instances, apply those updates
and then delete the older ones, and to roll back
you need to perform a further rolling update.
We then have Immutable, this is the best option
for mission critical productions systems.
It allows you to maintain full capacity,
it will set up a completely separate autoscaling group
and start doing the updates there, and to roll back,
you just need to delete the new instances
and autoscaling group.
In terms of advanced Elastic Beanstalk
just remember that you can customize your Elastic Beanstalk
environment by adding configuration files.
These files are written in YAML or JSON,
they're gonna have the .config extension.
You can call them any file name that you want.
But the .config files have to saved
to the .ebextensions folder
and the .ebextensions folder must be located
in the top level directory
of your application source code bundle.
Moving on top RDS and Elastic Beanstalk,
so we have two different options for launching
your RDS instance, you can launch it
with Elastic Beanstalk or you can launch it
outside Elastic Beanstalk.
If you launch it within Elastic Beanstalk,
when you terminate the Elastic Beanstalk environment
the database will also be terminated.
It makes it quick and easy to add your databases
and get started, but it's really only suitable
for Dev and Test environments only.
If you launch your RDS instance outside
of Elastic Beanstalk, there is going to be some additional
configuration steps required, you're gonna need to add
your own Security Group and you're going to need
to configure the connection string
or the connection information.
So the username, the password, the database endpoint,
the database name, the table, et cetera.
And then it's suitable for production environments,
it gives you much more flexibility and it means
that if you terminate a Elastic Beanstalk environment
your production RDS instance will not be terminated.
It also allows you to have connections
from multiple environments as well, so bear that in mind.
So that is it for this lecture guys,
and this section of the course,
you've done really, really well.
Hopefully we've covered off everything,
if you do see something around
the other application services, such as SQS or SES
or even simple workflow service
which we haven't covered, do let us know,
and we will update this section of the course.
So that's it from me, if you have any questions
please let me know, if not,
feel free to move on to the next section, thank you.